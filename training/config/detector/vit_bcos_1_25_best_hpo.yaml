# log dir 
log_dir: /home/ma/ma_ma/ma_tischuet/Interpretable-Deep-Fake-Detection/logs/vit

# model setting -> old
freeze: false
pretrained: /pfs/work9/workspace/scratch/ma_tischuet-team_project_explainable_deepfakes/weights/best_weights/vit_bcos_1_25.pth
#/home/ma/ma_ma/ma_kreffert/Interpretable-Deep-Fake-Detection/training/pretrained/resnet_34-a63425a03e.pth
#/home/ma/ma_ma/ma_kreffert/Interpretable-Deep-Fake-Detection/weights/ResNet34_Bcos_v2/resnet_34-a63425a03e.pth   # path to a pre-trained model, if using one
from_url: false
model_name: vit_bcos   # model name
backbone_name: vit_bcos  # backbone name

#backbone setting
backbone_config:
  num_classes: 2
  channels: 6
  #pretrained: false
  logit_bias: #0.0 #None
  logit_temperature: #10 #None
  b: 1.25
  max_out: 2
  # either set the model type
  model_type: vitc_ti_patch1_14
  # or the parameters directly, these values are only taken when model_type is not provided
  image_size: 14 #14 # Union[int, Tuple[int, int]],
  patch_size: 1 # Union[int, Tuple[int, int]],
  dim: 384 #192
  depth: 11 # 12-1
  heads: 6
  mlp_dim: 1536
  conv_stem: [48, 96, 192, 384] #[24, 48, 96, 192]
  norm: DetachableLayerNorm
  norm_bias: true
  norm_2d: BatchNorm2d
  norm_2d_bias: false

# dataset
all_dataset: [FaceForensics++, FF-F2F, FF-DF, FF-FS, FF-NT] #, FaceShifter, DeepFakeDetection, Celeb-DF-v1, Celeb-DF-v2, DFDCP, DFDC, DeeperForensics-1.0, UADFV]
train_dataset: [FaceForensics++]
val_dataset: [FaceForensics++] #, FF-F2F, FF-DF, FF-FS, FF-NT]
test_dataset: [FaceForensics++] #, FF-F2F, FF-DF, FF-FS, FF-NT]

compression: c23  # compression-level for videos
train_batchSize: 16   # training batch size
test_batchSize: 16   # test batch size
val_batchSize: 16
workers: 8   # number of data loading workers
frame_num: {'train': 32, 'test': 32, 'val': 32}   # number of frames to use per video in training and testing
resolution: 224   # resolution of output image to network
with_mask: true   # whether to include mask information in the input
with_landmark: false   # whether to include facial landmark information in the input
save_ckpt: true   # whether to save checkpoint
save_feat: true   # whether to save features
# add_inverse_channels: true


# data augmentation
dataset_type: 'bcos'
use_data_augmentation: false  # Add this flag to enable/disable data augmentation
data_aug:
  flip_prob: 0.5
  rotate_prob: 0.5
  rotate_limit: [-10, 10]
  blur_prob: 0.5
  blur_limit: [3, 7]
  brightness_prob: 0.5
  brightness_limit: [-0.1, 0.1]
  contrast_limit: [-0.1, 0.1]
  quality_lower: 40
  quality_upper: 100

# mean and std for normalization
mean: [0.5, 0.5, 0.5]
std: [0.5, 0.5, 0.5]

# optimizer config
optimizer:
  # choose between 'adam' and 'sgd'
  type: adam
  adam:
    lr: 0.0001613474921473995  # learning rate -> bcos paper 2.5e-4
    beta1: 0.9272074779325502  # beta1 for Adam optimizer
    beta2: 0.8300096457532955 # beta2 for Adam optimizer
    eps: 0.00000878975218453285  # epsilon for Adam optimizer (KAI: added in denominator to resolve division by zero if too low may cause NaNs!!)
    weight_decay: 0.00020901212629636983  # weight decay for regularization (KAI -> according to bcos paper, not necessary since weights normalized to unit norm) 
    amsgrad: true
  sgd:
    lr: 0.0002  # learning rate, KAI: Lower LR may stabilize the results
    momentum: 0.9  # momentum for SGD optimizer
    weight_decay: 0.0005  # weight decay for regularization
  gradient_clipping: false

# training config
lr_scheduler: # step, cosine, warmup_cosine, linear
lr_eta_min: 0.00000000050054063866
lr_T_max: 175.88904633844265
lr_step: 10
lr_gamma: 0.3103192664531902
nEpochs: 20   # number of epochs to train for
start_epoch: 0   # manual epoch number (useful for restarts)
save_epoch: 1   # interval epochs for saving models
rec_iter: 500   # interval iterations for recording
logdir: ./logs   # folder to output images and logs
manualSeed: 1   # manual seed for random number generation

# loss function
loss_func: cross_entropy   # loss function to use
losstype: null

# metric
metric_scoring: auc   # metric for evaluation (auc, acc, eer, ap)

# cuda
ddp: false   # Kai: unnecessary, since it is overwritten anyway in train.py-> main() -> config['ddp']= args.ddp
cuda: true   # whether to use CUDA acceleration
cudnn: true   # whether to use CuDNN for convolution operations
