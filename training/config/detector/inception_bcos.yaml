# log dir 
log_dir: /mntcephfs/lab_data/zhiyuanyan/benchmark_results/logs_final/inception_bcos

# model setting
pretrained: /home/ma/ma_ma/ma_tischuet/Interpretable-Deep-Fake-Detection/training/pretrained/inception_v3_google-1a9a5a14.pth   # path to a pre-trained model, if using one
model_name: inception_bcos_detector   # model name; tilo: this is the name of the detector
backbone_name: inception_bcos  # backbone name
get_pretrained: False

#backbone setting
backbone_config:
  num_classes: 2
  inc: 3
  dropout: false
  mode: Original
  aux_logits: False
  transform_input: False
  inception_blocks: # default from network
  init_weights: # default from network
  log_temperature: 1 # T^{-1}
  bias: [0.5, 0.5] # based on number of classes: in case of 10 classes it was 0.1, 0.9
  b: 1.25
  scale_fact: 65 # based on experimentation the optimal factor is between 50 and 70 for a b=1.25

# dataset
all_dataset: [FaceForensics++, FF-F2F, FF-DF, FF-FS, FF-NT, FaceShifter, DeepFakeDetection, Celeb-DF-v1, Celeb-DF-v2, DFDCP, DFDC, DeeperForensics-1.0, UADFV]
train_dataset: [FaceForensics++]
test_dataset: [FaceForensics++]

compression: c40  # compression-level for videos
train_batchSize: 32   # training batch size
test_batchSize: 32   # test batch size
workers: 8   # number of data loading workers
frame_num: {'train': 32, 'test': 32}   # number of frames to use per video in training and testing
resolution: 299   # resolution of output image to network
with_mask: false   # whether to include mask information in the input
with_landmark: false   # whether to include facial landmark information in the input
save_ckpt: true   # whether to save checkpoint
save_feat: true   # whether to save features
add_inverse_channels: true



# data augmentation
dataset_type: bcos
use_data_augmentation: False  # Add this flag to enable/disable data augmentation
data_aug:
  flip_prob: 0.5
  rotate_prob: 0.5
  rotate_limit: [-10, 10]
  blur_prob: 0.5
  blur_limit: [3, 7]
  brightness_prob: 0.5
  brightness_limit: [-0.1, 0.1]
  contrast_limit: [-0.1, 0.1]
  quality_lower: 40
  quality_upper: 100

# mean and std for normalization
mean: [0.5, 0.5, 0.5]
std: [0.5, 0.5, 0.5]

# optimizer config
optimizer:
  # choose between 'adam' and 'sgd'
  type: adam
  adam:
    lr: 0.00025  # learning rate
    beta1: 0.9  # beta1 for Adam optimizer
    beta2: 0.999 # beta2 for Adam optimizer
    eps: 0.00000001  # epsilon for Adam optimizer
    weight_decay: 0.000  # weight decay for regularization
    amsgrad: false
  sgd:
    lr: 0.0002  # learning rate
    momentum: 0.9  # momentum for SGD optimizer
    weight_decay: 0.0005  # weight decay for regularization
  gradient_clipping: True

# training config
lr_scheduler: warmup_cosine
lr_eta_min: 0   # learning rate scheduler
nEpochs: 60   # number of epochs to train for
start_epoch: 0   # manual epoch number (useful for restarts)
save_epoch: 1   # interval epochs for saving models
rec_iter: 100   # interval iterations for recording
logdir: ./logs   # folder to output images and logs
manualSeed: 1024   # manual seed for random number generation
save_ckpt: false   # whether to save checkpoint

# loss function
loss_func: cross_entropy   # loss function to use
losstype: null

# metric
metric_scoring: auc   # metric for evaluation (auc, acc, eer, ap)

# cuda

cuda: true   # whether to use CUDA acceleration
cudnn: true   # whether to use CuDNN for convolution operations
